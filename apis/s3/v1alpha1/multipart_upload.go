// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// MultipartUploadParameters defines the desired state of MultipartUpload
type MultipartUploadParameters struct {
	ACL *string `json:"acl,omitempty"`
	Bucket *string `json:"bucket,omitempty"`
	CacheControl *string `json:"cacheControl,omitempty"`
	ContentDisposition *string `json:"contentDisposition,omitempty"`
	ContentEncoding *string `json:"contentEncoding,omitempty"`
	ContentLanguage *string `json:"contentLanguage,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty"`
	Expires *metav1.Time `json:"expires,omitempty"`
	GrantFullControl *string `json:"grantFullControl,omitempty"`
	GrantRead *string `json:"grantRead,omitempty"`
	GrantReadACP *string `json:"grantReadACP,omitempty"`
	GrantWriteACP *string `json:"grantWriteACP,omitempty"`
	Key *string `json:"key,omitempty"`
	Metadata map[string]*string `json:"metadata,omitempty"`
	ObjectLockLegalHoldStatus *string `json:"objectLockLegalHoldStatus,omitempty"`
	ObjectLockMode *string `json:"objectLockMode,omitempty"`
	ObjectLockRetainUntilDate *metav1.Time `json:"objectLockRetainUntilDate,omitempty"`
	RequestPayer *string `json:"requestPayer,omitempty"`
	SSECustomerAlgorithm *string `json:"sseCustomerAlgorithm,omitempty"`
	SSECustomerKey *string `json:"sseCustomerKey,omitempty"`
	SSECustomerKeyMD5 *string `json:"sseCustomerKeyMD5,omitempty"`
	SSEKMSEncryptionContext *string `json:"sseKMSEncryptionContext,omitempty"`
	SSEKMSKeyID *string `json:"sseKMSKeyID,omitempty"`
	ServerSideEncryption *string `json:"serverSideEncryption,omitempty"`
	StorageClass *string `json:"storageClass,omitempty"`
	Tagging *string `json:"tagging,omitempty"`
	WebsiteRedirectLocation *string `json:"websiteRedirectLocation,omitempty"`
}

// MultipartUploadSpec defines the desired state of MultipartUpload
type MultipartUploadSpec struct {
	runtimev1alpha1.ResourceSpec `json:",inline"`
	ForProvider MultipartUploadParameters `json:"forProvider"`
}

// MultipartUploadObservation defines the observed state of MultipartUpload
type MultipartUploadObservation struct {
	AbortDate *metav1.Time `json:"abortDate,omitempty"`
	AbortRuleID *string `json:"abortRuleID,omitempty"`
	RequestCharged *string `json:"requestCharged,omitempty"`
	UploadID *string `json:"uploadID,omitempty"`
}

// MultipartUploadStatus defines the observed state of MultipartUpload.
type MultipartUploadStatus struct {
	runtimev1alpha1.ResourceStatus `json:",inline"`
	AtProvider MultipartUploadObservation `json:"atProvider"`
}


// +kubebuilder:object:root=true

// MultipartUpload is the Schema for the MultipartUploads API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type MultipartUpload struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   MultipartUploadSpec   `json:"spec,omitempty"`
	Status MultipartUploadStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MultipartUploadList contains a list of MultipartUploads
type MultipartUploadList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []MultipartUpload `json:"items"`
}

// Repository type metadata.
var (
	MultipartUploadKind             = "MultipartUpload"
	MultipartUploadGroupKind        = schema.GroupKind{Group: Group, Kind: MultipartUploadKind}.String()
	MultipartUploadKindAPIVersion   = MultipartUploadKind + "." + GroupVersion.String()
	MultipartUploadGroupVersionKind = GroupVersion.WithKind(MultipartUploadKind)
)

func init() {
	SchemeBuilder.Register(&MultipartUpload{}, &MultipartUploadList{})
}

