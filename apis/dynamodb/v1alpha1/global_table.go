// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// GlobalTableParameters defines the desired state of GlobalTable
type GlobalTableParameters struct {
	GlobalTableName *string `json:"globalTableName,omitempty"`
	ReplicationGroup []*Replica `json:"replicationGroup,omitempty"`
}

// GlobalTableSpec defines the desired state of GlobalTable
type GlobalTableSpec struct {
	runtimev1alpha1.ResourceSpec `json:",inline"`
	ForProvider GlobalTableParameters `json:"forProvider"`
}

// GlobalTableObservation defines the observed state of GlobalTable
type GlobalTableObservation struct {
	CreationDateTime *metav1.Time `json:"creationDateTime,omitempty"`
	GlobalTableStatus *string `json:"globalTableStatus,omitempty"`
}

// GlobalTableStatus defines the observed state of GlobalTable.
type GlobalTableStatus struct {
	runtimev1alpha1.ResourceStatus `json:",inline"`
	AtProvider GlobalTableObservation `json:"atProvider"`
}


// +kubebuilder:object:root=true

// GlobalTable is the Schema for the GlobalTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlobalTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   GlobalTableSpec   `json:"spec,omitempty"`
	Status GlobalTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalTableList contains a list of GlobalTables
type GlobalTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []GlobalTable `json:"items"`
}

// Repository type metadata.
var (
	GlobalTableKind             = "GlobalTable"
	GlobalTableGroupKind        = schema.GroupKind{Group: Group, Kind: GlobalTableKind}.String()
	GlobalTableKindAPIVersion   = GlobalTableKind + "." + GroupVersion.String()
	GlobalTableGroupVersionKind = GroupVersion.WithKind(GlobalTableKind)
)

func init() {
	SchemeBuilder.Register(&GlobalTable{}, &GlobalTableList{})
}

