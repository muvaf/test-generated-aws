// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package repository

import (
	svcsdk "github.com/aws/aws-sdk-go/service/ecr"
	"github.com/muvaf/test-generated-aws/apis/ecr/v1alpha1"
)
func GenerateDescribeRepositoriesInput(cr *v1alpha1.Repository) *svcsdk.DescribeRepositoriesInput {
	res := &svcsdk.DescribeRepositoriesInput{}

	if cr.Status.AtProvider.RegistryID != nil {
		res.SetRegistryId(*cr.Status.AtProvider.RegistryID)
	}

	return res
}


// GenerateCreateRepositoryInput returns a CreateRepositoryInput object.
func GenerateCreateRepositoryInput(cr *v1alpha1.Repository) *svcsdk.CreateRepositoryInput {
	res := &svcsdk.CreateRepositoryInput{}

	if cr.Spec.ForProvider.EncryptionConfiguration != nil {
		f0 := &svcsdk.EncryptionConfiguration{}
		if cr.Spec.ForProvider.EncryptionConfiguration.EncryptionType != nil {
			f0.SetEncryptionType(*cr.Spec.ForProvider.EncryptionConfiguration.EncryptionType)
		}
		if cr.Spec.ForProvider.EncryptionConfiguration.KMSKey != nil {
			f0.SetKmsKey(*cr.Spec.ForProvider.EncryptionConfiguration.KMSKey)
		}
		res.SetEncryptionConfiguration(f0)
	}
	if cr.Spec.ForProvider.ImageScanningConfiguration != nil {
		f1 := &svcsdk.ImageScanningConfiguration{}
		if cr.Spec.ForProvider.ImageScanningConfiguration.ScanOnPush != nil {
			f1.SetScanOnPush(*cr.Spec.ForProvider.ImageScanningConfiguration.ScanOnPush)
		}
		res.SetImageScanningConfiguration(f1)
	}
	if cr.Spec.ForProvider.ImageTagMutability != nil {
		res.SetImageTagMutability(*cr.Spec.ForProvider.ImageTagMutability)
	}
	if cr.Spec.ForProvider.RepositoryName != nil {
		res.SetRepositoryName(*cr.Spec.ForProvider.RepositoryName)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return res
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func GenerateDeleteRepositoryInput(cr *v1alpha1.Repository) *svcsdk.DeleteRepositoryInput {
	res := &svcsdk.DeleteRepositoryInput{}

	if cr.Status.AtProvider.RegistryID != nil {
		res.SetRegistryId(*cr.Status.AtProvider.RegistryID)
	}
	if cr.Spec.ForProvider.RepositoryName != nil {
		res.SetRepositoryName(*cr.Spec.ForProvider.RepositoryName)
	}

	return res
}